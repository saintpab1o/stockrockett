"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var IEXRequest = /** @class */ (function () {
    function IEXRequest(fetchFunc, _a) {
        var _this = this;
        var publishable = _a.publishable, _b = _a.sandbox, sandbox = _b === void 0 ? false : _b, _c = _a.version, version = _c === void 0 ? "beta" : _c;
        this.setToken = function (token) {
            return _this.sandbox && token[0] !== "T" ? "T" + token : token;
        };
        this.params = function (params) {
            if (params === void 0) { params = ""; }
            var env = _this.sandbox ? "sandbox" : "cloud";
            var url = "https://" + env + ".iexapis.com/" + _this.version + "/" + _this.datatype;
            var operand = params.match(new RegExp("\\?", "g"));
            var q = operand && operand[0] === "?" ? "&" : "?";
            var pk = "token=" + _this.setToken(_this.publishable);
            var request = url + "/" + _this.stockSymbol + "/" + params + q + pk;
            if (_this.datatype === "deep") {
                var request_1 = url + "/" + params + "?symbols=" + _this.stockSymbol + "&" + pk;
                _this.datatype = "stock";
                _this.sandbox;
                return request_1;
            }
            if (_this.datatype === "stock/market/batch") {
                var request_2 = url + "?symbols=" + _this.stockSymbols.map(function (symbol) { return symbol; }) + "&types=" + params + "&" + pk;
                _this.datatype = "stock";
                _this.sandbox;
                return request_2;
            }
            if (_this.datatype === "crypto") {
                var request_3 = url + "/" + _this.cryptoCurrency + "/" + params + q + pk;
                _this.datatype = "stock";
                _this.sandbox;
                return request_3;
            }
            if (_this.datatype === "tops" ||
                _this.datatype === "stock/market" ||
                _this.datatype === "fx" ||
                _this.datatype === "stats" ||
                _this.datatype === "search" ||
                _this.datatype === "time-series" ||
                _this.datatype === "ref-data") {
                var request_4 = url + "/" + params + q + pk;
                _this.datatype = "stock";
                _this.sandbox;
                return request_4;
            }
            _this.sandbox;
            return request;
        };
        this.batchParams = function () {
            var types = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                types[_i] = arguments[_i];
            }
            var env = _this.sandbox ? "sandbox" : "cloud";
            var url = "https://" + env + ".iexapis.com/" + _this.version + "/" + _this.datatype;
            var symbols = "" + _this.stockSymbols.map(function (symbol) { return symbol; });
            var batchTypes = "types=" + types.map(function (type) { return type; }) + "&token=" + _this.setToken(_this.publishable);
            var request;
            if (_this.datatype === "stock/market/batch") {
                request = url + "/batch?symbols=" + symbols + "&" + batchTypes;
                _this.datatype = "stock";
                _this.sandbox;
                return request;
            }
            request = url + "/" + _this.stockSymbol + "/batch?" + batchTypes;
            _this.sandbox;
            return request;
        };
        this.request = function (params) {
            return _this.response(_this.params, params);
        };
        this.response = function (req, params, range) { return __awaiter(_this, void 0, void 0, function () {
            var n, res, contentType, error, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, , 7]);
                        n = range ? range : "";
                        return [4 /*yield*/, this.fetchFunc(req(params + n))];
                    case 1:
                        res = _a.sent();
                        if (!(typeof res.headers.get === "function")) return [3 /*break*/, 5];
                        contentType = res.headers.get("content-type");
                        if (!(contentType === "application/json; charset=utf-8")) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.json()];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        if (!(res.status >= 400)) return [3 /*break*/, 5];
                        return [4 /*yield*/, res.text()];
                    case 4:
                        error = _a.sent();
                        throw new Error(error);
                    case 5: return [2 /*return*/, res.data];
                    case 6:
                        err_1 = _a.sent();
                        return [2 /*return*/, err_1.response ? err_1.response.data : err_1];
                    case 7: return [2 /*return*/];
                }
            });
        }); };
        (this.fetchFunc = fetchFunc),
            (this.publishable = publishable),
            (this.version = version),
            (this.sandbox = sandbox),
            (this.datatype = "stock"),
            (this.cryptoCurrency = ""),
            (this.stockSymbol = ""),
            (this.stockSymbols = []),
            (this.request = this.request);
    }
    return IEXRequest;
}());
exports.default = IEXRequest;
